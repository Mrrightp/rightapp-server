// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int         @id @default(autoincrement())
  username           String      @unique
  email              String      @unique
  password           String
  refreshToken       String?
  profileImgUrl      String?     @default("")
  regDate            DateTime?   @default(now())
  ipAdress           String?
  isAdmin            Boolean     @default(false)
  topics             Topic[]     @relation("wrtten topics")
  materials          Materials[] @relation("wrttenMaterials")
  topicsUserFollowed Topic[]
  followedBy         Follows[]   @relation("following")
  following          Follows[]   @relation("follower")
  role               Role        @default(USER)
  Faculty            Faculty?    @relation(fields: [facultyId], references: [id])
  facultyId          Int?
  department         Department? @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  bio                String?
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Topic {
  id            Int        @id @default(autoincrement())
  title         String
  slug          String     @unique
  content       String
  createdDate   DateTime?  @default(now())
  updatedDate   DateTime?  @default(now())
  author        User       @relation("wrtten topics", fields: [authorId], references: [id])
  authorId      Int
  coverImageUrl String?
  likes         Int?       @default(0)
  viwes         Int?       @default(0)
  followers     User[]
  Category      Category?  @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  comments      Comments[]
  uploads       upload[]
}

model Comments {
  id          Int        @id @default(autoincrement())
  slug        String
  content     String
  Topic       Topic?     @relation(fields: [topicId], references: [id])
  topicId     Int?
  materials   Materials? @relation(fields: [materialsId], references: [id])
  materialsId Int?
  replys      Replys[]
}

model Replys {
  id         Int       @id @default(autoincrement())
  slug       String
  content    String
  Comments   Comments? @relation(fields: [commentsId], references: [id])
  commentsId Int?
}

model Materials {
  id           Int          @id @default(autoincrement())
  title        String
  slug         String       @unique
  description  String
  createdDate  DateTime?    @default(now())
  updatedDate  DateTime?    @default(now())
  author       User         @relation("wrttenMaterials", fields: [authorId], references: [id])
  authorId     Int
  likes        Int?
  viwes        Int?
  comments     Comments[]
  courseCode   CourseCode   @relation(fields: [courseCodeId], references: [id])
  courseCodeId Int
  faculty      Faculty[]
  department   Department[]
  uploads      upload[]
}

model upload {
  id          Int       @id @default(autoincrement())
  link        String
  materials   Materials @relation(fields: [materialsId], references: [id])
  materialsId Int
  topic       Topic     @relation(fields: [topicId], references: [id])
  topicId     Int
}

model CourseCode {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  slug      String      @unique
  materials Materials[]
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  slug        String       @unique
  user        User[]
  materials   Materials    @relation(fields: [materialsId], references: [id])
  materialsId Int
  Departments Department[]
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  User        User[]
  materials   Materials @relation(fields: [materialsId], references: [id])
  materialsId Int
  faculty     Faculty   @relation(fields: [facultyId], references: [id])
  facultyId   Int
}

model Category {
  id     Int     @id @default(autoincrement())
  title  String? @unique
  slug   String?
  topics Topic[]
}
